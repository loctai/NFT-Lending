// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Event must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    return value!.toBytes();
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get action(): string {
    let value = this.get("action");
    return value!.toString();
  }

  set action(value: string) {
    this.set("action", Value.fromString(value));
  }

  get actionAddress(): Bytes {
    let value = this.get("actionAddress");
    return value!.toBytes();
  }

  set actionAddress(value: Bytes) {
    this.set("actionAddress", Value.fromBytes(value));
  }

  get params(): string {
    let value = this.get("params");
    return value!.toString();
  }

  set params(value: string) {
    this.set("params", Value.fromString(value));
  }
}

export class Covenant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Covenant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Covenant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Covenant", id.toString(), this);
    }
  }

  static load(id: string): Covenant | null {
    return changetype<Covenant | null>(store.get("Covenant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txhash(): string {
    let value = this.get("txhash");
    return value!.toString();
  }

  set txhash(value: string) {
    this.set("txhash", Value.fromString(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get nftContract(): Bytes {
    let value = this.get("nftContract");
    return value!.toBytes();
  }

  set nftContract(value: Bytes) {
    this.set("nftContract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get itemId(): BigInt {
    let value = this.get("itemId");
    return value!.toBigInt();
  }

  set itemId(value: BigInt) {
    this.set("itemId", Value.fromBigInt(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value!.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get borrower(): Bytes | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenAdr(): Bytes {
    let value = this.get("tokenAdr");
    return value!.toBytes();
  }

  set tokenAdr(value: Bytes) {
    this.set("tokenAdr", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get priceBorrow(): BigInt {
    let value = this.get("priceBorrow");
    return value!.toBigInt();
  }

  set priceBorrow(value: BigInt) {
    this.set("priceBorrow", Value.fromBigInt(value));
  }

  get maxDays(): BigInt {
    let value = this.get("maxDays");
    return value!.toBigInt();
  }

  set maxDays(value: BigInt) {
    this.set("maxDays", Value.fromBigInt(value));
  }

  get daysBorrow(): BigInt {
    let value = this.get("daysBorrow");
    return value!.toBigInt();
  }

  set daysBorrow(value: BigInt) {
    this.set("daysBorrow", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get borrowedAt(): BigInt {
    let value = this.get("borrowedAt");
    return value!.toBigInt();
  }

  set borrowedAt(value: BigInt) {
    this.set("borrowedAt", Value.fromBigInt(value));
  }
}
